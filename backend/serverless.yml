service: todo-app-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    NODE_ENV: ${self:provider.stage}
    USER_POOL_ID: ${self:custom.userPoolId}
    USER_POOL_CLIENT_ID: ${self:custom.userPoolClientId}
    TODO_TABLE: ${self:custom.todoTable}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: 
        - !GetAtt TodosTable.Arn

custom:
  userPoolId: ${opt:user-pool-id, 'TODO_APP_USER_POOL_ID'}
  userPoolClientId: ${opt:user-pool-client-id, 'TODO_APP_USER_POOL_CLIENT_ID'}
  todoTable: ${self:service}-${self:provider.stage}-todos
  serverless-offline:
    httpPort: 3001
  serverlessPluginTypescript:
    tsConfigFileLocation: './tsconfig.json'

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

functions:
  # Auth functions
  signUp:
    handler: src/functions/auth/signUp.handler
    events:
      - http:
          path: /auth/signup
          method: post
          cors: true

  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  # Todo functions
  listTodos:
    handler: src/functions/todos/listTodos.handler
    events:
      - http:
          path: /todos
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  getTodo:
    handler: src/functions/todos/getTodo.handler
    events:
      - http:
          path: /todos/{id}
          method: get
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  createTodo:
    handler: src/functions/todos/createTodo.handler
    events:
      - http:
          path: /todos
          method: post
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  updateTodo:
    handler: src/functions/todos/updateTodo.handler
    events:
      - http:
          path: /todos/{id}
          method: put
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  deleteTodo:
    handler: src/functions/todos/deleteTodo.handler
    events:
      - http:
          path: /todos/{id}
          method: delete
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

  batchDeleteTodos:
    handler: src/functions/todos/batchDeleteTodos.handler
    events:
      - http:
          path: /todos/batch
          method: delete
          cors: true
          authorizer:
            name: cognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt CognitoUserPool.Arn

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.todoTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TodoIdIndex
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
            Projection:
              ProjectionType: ALL